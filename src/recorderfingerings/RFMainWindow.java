/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package recorderfingerings;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiEvent;
import javax.sound.midi.MidiFileFormat;
import javax.sound.midi.MidiMessage;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Sequence;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Track;
import javax.swing.JFileChooser;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import mathnstuff.components.ImagePanel;

/**
 *
 * @author mewer
 */
public class RFMainWindow extends javax.swing.JFrame {

    public MidiConversions midiConversions;
    public ImagePanel imagePanel;
    
    /**
     * Creates new form RFMainWindow
     */
    public RFMainWindow() {
        initComponents();
        tablePlayShow.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    hotswapSequence();
                }
            }
        });
        try {
            MidiPlayer.ensureReceivingDevice();
        } catch (MidiUnavailableException ex) {
            Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (jPanel6 instanceof ImagePanel) {
            this.imagePanel = ((ImagePanel)jPanel6);
        }
        this.midiConversions = new MidiConversions();
        this.midiConversions.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        labelFileName = new javax.swing.JLabel();
        labelTracks = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        spinTranspose = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        spinSpeed = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        cbFlipFingerings = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePlayShow = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnPlayPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        labelCurrentNote = new javax.swing.JLabel();
        jPanel6 = new ImagePanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Recorder Fingerings");

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setToolTipText("");

        labelFileName.setText("File: -");

        labelTracks.setText("Tracks: -");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelFileName)
                    .add(labelTracks))
                .addContainerGap(693, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(labelFileName)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelTracks)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jSplitPane2.setTopComponent(jPanel1);

        spinTranspose.setModel(new javax.swing.SpinnerNumberModel(0, -128, 128, 1));
        spinTranspose.setEnabled(false);
        spinTranspose.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinTransposeStateChanged(evt);
            }
        });

        jLabel2.setText("Transpose:");

        spinSpeed.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(100.0f), Float.valueOf(0.0f), null, Float.valueOf(1.0f)));
        spinSpeed.setEnabled(false);
        spinSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinSpeedStateChanged(evt);
            }
        });

        jLabel3.setText("Speed:");

        cbFlipFingerings.setText("Flip fingerings");
        cbFlipFingerings.setEnabled(false);

        tablePlayShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Play", "Show", "Track", "Channel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePlayShow);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(18, 18, 18)
                        .add(spinTranspose, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel3)
                        .add(18, 18, 18)
                        .add(spinSpeed)))
                .add(18, 18, 18)
                .add(cbFlipFingerings)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 223, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(0, 121, Short.MAX_VALUE)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(spinSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(spinTranspose, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2)
                            .add(cbFlipFingerings)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(jPanel4);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 761, Short.MAX_VALUE)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane2))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 298, Short.MAX_VALUE)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                    .add(jSplitPane2)
                    .addContainerGap()))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jToolBar1.setRollover(true);

        btnPlayPause.setText("|>");
        btnPlayPause.setFocusable(false);
        btnPlayPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPlayPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayPauseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPlayPause);

        btnStop.setText("[_]");
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        jToolBar1.add(btnStop);

        labelCurrentNote.setText("-");

        jPanel6.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel6AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 164, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelCurrentNote))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 485, Short.MAX_VALUE)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelCurrentNote)
                        .add(0, 237, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        jMenu1.setText("File");

        jMenuItem1.setText("Open midi...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public JFileChooser chooser = new JFileChooser();
    public File chosenFile;
    public Sequence sequence = null;
    public boolean[][] channels;
    public MidiPlayer midiPlayer;
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = chooser.getSelectedFile();
                chosenFile = file;
                MidiFileFormat mff = MidiSystem.getMidiFileFormat(file);
                sequence = MidiSystem.getSequence(file);
                
                Track[] tracks = sequence.getTracks();
                int trackCount = tracks.length;
                
                labelFileName.setText("File: " + file.getAbsolutePath());
                labelTracks.setText("Tracks: " + trackCount);
                spinTranspose.setEnabled(true);
                spinSpeed.setEnabled(true);
                cbFlipFingerings.setEnabled(true);
                channels = new boolean[trackCount][16];

                //System.out.println("Tracks: " + trackCount);
                for (int i = 0; i < trackCount; i++) {
                    Track t = tracks[i];
                    for (int j = 0; j < 16; j++) {
                        channels[i][j] = false;
                    }
                    //System.out.println("Track " + t + " ----------------------------------------------");
                    //System.out.println("Events: " + t.size());
                    for (int j = 0; j < t.size(); j++) {
                        MidiEvent event = t.get(j);
                        MidiMessage message = event.getMessage();
                        int status = message.getStatus();
                        int type = (status & 0xF0) >> 4;
                        int channel = status & 0x0F;
                        switch (type) {
                            case 0x8:
                                // Note off
                                break;
                            case 0x9:
                                // Note on
                                channels[i][channel] = true;
                                int pitch = (int)(message.getMessage()[1] & 0xFF);
                                //System.out.println("Event " + j + "  \tat " + event.getTick());
                                //System.out.println("Message " + Integer.toHexString(message.getStatus()) + " " + MeUtils.bytesToHex(message.getMessage()));
                                //System.out.println(event.getTick() + " \t - " + Integer.toHexString(channel) + " : " + Integer.toHexString(pitch));
                                break;
                        }
                    }
                }
                
                updateTrackPanel();
            } catch (InvalidMidiDataException ex) {
                Logger.getLogger(RecorderFingerings.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RecorderFingerings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    public void updateTrackPanel() {     
        DefaultTableModel model = ((DefaultTableModel)tablePlayShow.getModel());
        int channelCount = 0;
        boolean openChannelFound = false;
        for (int i = 0; i < channels.length; i++) {
            for (int j = 0; j < channels[i].length; j++) {
                if (channels[i][j]) {
                    model.addRow(new Object[] {true, !openChannelFound, i, j});
                    openChannelFound = true;
                }
            }
        }
    }
    
    public void hotswapSequence() {
        if (midiPlayer != null) {
            try {
                midiPlayer.hotswapSequence(compileSequence());
                midiPlayer.setTempoFactor(((Float)spinSpeed.getValue()).floatValue() / 100);
            } catch (InvalidMidiDataException ex) {
                Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public boolean[][] playingChannels;
    public boolean[][] showingChannels;
    
    public Sequence compileSequence() {
        Sequence newSq = null;
                
        if (this.sequence != null) {
            try {
                //TODO This is inefficient.
                newSq = MidiSystem.getSequence(chosenFile);

                Track[] tracks = newSq.getTracks();
                
                DefaultTableModel model = ((DefaultTableModel)tablePlayShow.getModel());
                                
                playingChannels = new boolean[tracks.length][16];
                showingChannels = new boolean[tracks.length][16];
                
                for (int i = 0; i < model.getRowCount(); i++) {
                    boolean playing = (Boolean)model.getValueAt(i, 0);
                    boolean showing = (Boolean)model.getValueAt(i, 1);
                    int track = (Integer)model.getValueAt(i, 2);
                    int channel = (Integer)model.getValueAt(i, 3);
                    if (playing) {
                        playingChannels[track][channel] = true;
                    }
                    if (showing) {
                        showingChannels[track][channel] = true;
                    }
                }
                
                for (int i = 0; i < tracks.length; i++) {
                    ArrayList<MidiEvent> eventsToDelete = new ArrayList<MidiEvent>();
                    Track t = tracks[i];
                    boolean[] includedChannels = new boolean[16];
                    for (int j = 0; j < 16; j++) {
                        includedChannels[j] = playingChannels[i][j] || showingChannels[i][j];
                    }

                    //TODO This could maybe be done in one pass.
                    for (int j = 0; j < t.size(); j++) {
                        MidiEvent event = t.get(j);
                        MidiMessage message = event.getMessage();
                        int status = message.getStatus();
                        int type = (status & 0xF0) >> 4;
                        int channel = status & 0xF;
                        if (type == 0x9) {
                            if (!includedChannels[channel]) {
                                eventsToDelete.add(event);
                            } else if (message instanceof ShortMessage) {
                                ShortMessage m = (ShortMessage) message;
                                int pitch = m.getData1() + ((Integer) spinTranspose.getValue()).intValue();
                                int volume = playingChannels[i][channel] ? m.getData2() : 0;
                                m.setMessage(m.getCommand(), m.getChannel(), pitch, volume);
                            }
                        }
                    }
                    for (MidiEvent event : eventsToDelete) {
                        t.remove(event);
                    }
                }
            } catch (InvalidMidiDataException ex) {
                Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return newSq;
    }
    
    public MidiPlayer.MidiEventListener makeMidiEventListener() {
        return new MidiPlayer.MidiEventListener() {
            @Override
            public void onEvent(int track, MidiEvent event) {
                MidiMessage message = event.getMessage();
                int status = message.getStatus();
                int type = (status & 0xF0) >> 4;
                int channel = status & 0xF;
                if (type == 0x9 && showingChannels[track][channel]) {
                    byte[] messageData = message.getMessage();
                    int pitch = (int)(messageData[1] & 0xFF);
                    labelCurrentNote.setText(MidiConversions.pitches[pitch]);
                    imagePanel.setImage(midiConversions.getImage(pitch, cbFlipFingerings.isSelected()));
                }
            }
        };
    }
    
    private void btnPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayPauseActionPerformed
        if (sequence != null) {
            try {
                if (midiPlayer == null) {
                    midiPlayer = new MidiPlayer(compileSequence());
                    midiPlayer.setMidiEventListener(makeMidiEventListener());
                    midiPlayer.setTempoFactor(((Float)spinSpeed.getValue()).floatValue() / 100);
                }
                if (midiPlayer.isRunning()) {
                    midiPlayer.stop();
                    btnPlayPause.setText("|>");
                } else {
                    midiPlayer.start();
                    btnPlayPause.setText("||");
                }
            } catch (MidiUnavailableException ex) {
                Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidMidiDataException ex) {
                Logger.getLogger(RFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnPlayPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if (sequence != null) {
            if (midiPlayer != null) {
                midiPlayer.stop();
                midiPlayer.released = true;
                btnPlayPause.setText("|>");
            }
            midiPlayer = null;
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void jPanel6AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel6AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel6AncestorAdded

    private void spinSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinSpeedStateChanged
        hotswapSequence();
    }//GEN-LAST:event_spinSpeedStateChanged

    private void spinTransposeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinTransposeStateChanged
        hotswapSequence();
    }//GEN-LAST:event_spinTransposeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RFMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RFMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RFMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RFMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RFMainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlayPause;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox cbFlipFingerings;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelCurrentNote;
    private javax.swing.JLabel labelFileName;
    private javax.swing.JLabel labelTracks;
    private javax.swing.JSpinner spinSpeed;
    private javax.swing.JSpinner spinTranspose;
    private javax.swing.JTable tablePlayShow;
    // End of variables declaration//GEN-END:variables
}
